<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://Carrylu.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jul 2019 23:33:04 +0800</lastBuildDate>
    
	<atom:link href="https://Carrylu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Set接口</title>
      <link>https://Carrylu.github.io/post/set/</link>
      <pubDate>Wed, 03 Jul 2019 23:33:04 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/set/</guid>
      <description>Collection接口子接口：Set接口 1、存储的数据特点：无序的、不可重复的元素 具体的： 以HashSet为例说明： 1. 无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。 2. 不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。
2、元素添加的过程：（以Hashset为例） 我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值， 此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断 数组此位置上是否已经元素： 如果此位置上没其他元素，则元素a添加成功。 ---&amp;gt;情况1 如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值： 如果hash值不相同，则元素a添加成功。---&amp;gt;情况2 如果hash值相同，进而需要调用元素a所在类的equals()方法： equals()返回true,元素a添加失败 equals()返回false,则元素a添加成功。---&amp;gt;情况2 对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。 jdk 7 :元素a放到数组中，指向原来的元素。 jdk 8 :原来的元素在数组中，指向元素a 总结：七上八下 HashSet底层：数组+链表的结构。（前提：jdk7)  3、常用方法 Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。  4、常用实现类 |----Collection接口：单列集合，用来存储一个一个的对象 * |----Set接口：存储无序的、不可重复的数据 --&amp;gt;高中讲的“集合” * |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值 * |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历 * 在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。 对于频繁的遍历操作，LinkedHashSet效率高于HashSet. * |----TreeSet：可以照添加对象的指定属性，进行排序。  5、存储对象所在类的要求 HashSet/LinkedHashSet: 要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals() 要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码 * 重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。 TreeSet: 1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals(). 2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().  6、Treeset的使用 6.1 使用说明 1.向TreeSet中添加的数据，要求是相同类的对象。
2.两种排序方式：自然排序（实现Comparable接口和定制排序（Comparator）。
6.2 常用的排序方式 //方式一：自然排序 @Test public void test1(){ TreeSet set = new TreeSet(); //失败：不能添加不同类的对象 // set.</description>
    </item>
    
    <item>
      <title>Github更新博客</title>
      <link>https://Carrylu.github.io/post/hehe1/</link>
      <pubDate>Tue, 02 Jul 2019 23:39:02 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/hehe1/</guid>
      <description>第0步：现在carrylublog目录下输入 hugo --theme=m10c --baseUrl=&amp;quot;https://Carrylu.github.io/&amp;quot; --buildDrafts
第一步：先cd进入public文件夹，查看当前git仓库状态 git status
第二步：更新全部 git add *
第三步：接着输入git commit -m &amp;ldquo;更新说明&amp;rdquo; git commit -m &amp;quot;更新说明&amp;quot;
第四步：push到远程master分支上 git push origin master</description>
    </item>
    
    <item>
      <title>List接口</title>
      <link>https://Carrylu.github.io/post/hehe/</link>
      <pubDate>Tue, 02 Jul 2019 23:39:02 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/hehe/</guid>
      <description>Collection接口子接口：List接口 1、存储的数据特点：有序的、可重复的数据 2、常用方法 增：add(); 删：remove(int index); / remove(Object obj); 改：set(int index,Object ele); //按照索引查找 查：get(int index); 插：add(int index,Object ele); 长度：size(); 遍历：① Iterator迭代器方式 ② 增强for循环 ③ 普通的循环  ① Iterator迭代器方式
Iterator iterator=list.iterator(); while(iterator.hasnext()){ System.out.println(iterator.next()); }  ② 增强for循环
for(Object obj: list){ System.out.println(obj); }  ③ 普通的循环
String[] arr=new String[]{&amp;quot;AA&amp;quot;,&amp;quot;AA&amp;quot;,&amp;quot;AA&amp;quot;}; for(int i=0;i&amp;lt;arr.length;i++){ System.out.println(arr[i]); }  3、常用实现类 |----Collection接口：单列集合，用来存储一个一个的对象 * |----List接口：存储序的、可重复的数据。 --&amp;gt;“动态”数组,替换原的数组 * |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储 * |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储 * |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储  4、源码分析 4.1 Arraylist源码分析 * 2.</description>
    </item>
    
    <item>
      <title>青岛毕业行</title>
      <link>https://Carrylu.github.io/post/blog/</link>
      <pubDate>Tue, 02 Jul 2019 23:18:53 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/blog/</guid>
      <description> 青岛毕业行 </description>
    </item>
    
  </channel>
</rss>