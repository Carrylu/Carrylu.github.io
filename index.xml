<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://Carrylu.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jul 2019 23:15:29 +0800</lastBuildDate>
    
	<atom:link href="https://Carrylu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对象流的使用</title>
      <link>https://Carrylu.github.io/post/objectio/</link>
      <pubDate>Tue, 16 Jul 2019 23:15:29 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/objectio/</guid>
      <description>1.对象流： ObjectInputStream 和 ObjectOutputStream
2.作用：  ObjectOutputStream:内存中的对象&amp;mdash;&amp;gt;存储中的文件、通过网络传输出去：序列化过程 ObjectInputStream:存储中的文件、通过网络接收过来 &amp;mdash;&amp;gt;内存中的对象：反序列化过程  3.对象的序列化机制： 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘 上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的 Java对象
4.序列化代码实现： @Test public void testObjectOutputStream(){ ObjectOutputStream oos = null; try { //1. oos = new ObjectOutputStream(new FileOutputStream(&amp;quot;object.dat&amp;quot;)); //2. oos.writeObject(new String(&amp;quot;我爱北京天安门&amp;quot;)); oos.flush();//刷新操作 oos.writeObject(new Person(&amp;quot;王铭&amp;quot;,23)); oos.flush(); oos.writeObject(new Person(&amp;quot;张学良&amp;quot;,23,1001,new Account(5000))); oos.flush(); } catch (IOException e) { e.printStackTrace(); } finally { if(oos != null){ //3. try { oos.close(); } catch (IOException e) { e.printStackTrace(); } } } }  5.</description>
    </item>
    
    <item>
      <title>其它流的使用</title>
      <link>https://Carrylu.github.io/post/otherio/</link>
      <pubDate>Tue, 16 Jul 2019 23:10:38 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/otherio/</guid>
      <description>1. 标准的输入输出流：  System.in:标准的输入流，默认从键盘输入 System.out:标准的输出流，默认从控制台输出  修改默认的输入和输出行为： System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。
2.打印流 PrintStream 和PrintWriter 1. 说明： 提供了一系列重载的print()和println()方法，用于多种数据类型的输出 System.out返回的是PrintStream的实例
3.数据流 DataInputStream 和 DataOutputStream 作用： 用于读取或写出基本数据类型的变量或字符串
示例代码：
/* 练习：将内存中的字符串、基本数据类型的变量写出到文件中。 注意：处理异常的话，仍然应该使用try-catch-finally. */ @Test public void test3() throws IOException { //1. DataOutputStream dos = new DataOutputStream(new FileOutputStream(&amp;quot;data.txt&amp;quot;)); //2. dos.writeUTF(&amp;quot;刘建辰&amp;quot;); dos.flush();//刷新操作，将内存中的数据写入文件 dos.writeInt(23); dos.flush(); dos.writeBoolean(true); dos.flush(); //3. dos.close(); } /* 将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。 注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！ */ @Test public void test4() throws IOException { //1. DataInputStream dis = new DataInputStream(new FileInputStream(&amp;quot;data.</description>
    </item>
    
    <item>
      <title>转换流</title>
      <link>https://Carrylu.github.io/post/zhuanhuan/</link>
      <pubDate>Sun, 14 Jul 2019 23:22:00 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/zhuanhuan/</guid>
      <description>1.转换流涉及到的类：属于字符流（看后缀） InputStreamReader：将一个字节的输入流转换为字符的输入流 解码：字节、字节数组 &amp;mdash;&amp;gt;字符数组、字符串
OutputStreamWriter：将一个字符的输出流转换为字节的输出流 编码：字符数组、字符串 &amp;mdash;&amp;gt; 字节、字节数组
说明：编码决定了解码的方式
2.作用：提供字节流与字符流之间的转换 3.图示： 4.典型实现: @Test public void test1() throws IOException { FileInputStream fis = new FileInputStream(&amp;quot;dbcp.txt&amp;quot;); // InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集 //参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集 InputStreamReader isr = new InputStreamReader(fis,&amp;quot;UTF-8&amp;quot;);//使用系统默认的字符集 char[] cbuf = new char[20]; int len; while((len = isr.read(cbuf)) != -1){ String str = new String(cbuf,0,len); System.out.print(str); } isr.close(); } /* 此时处理异常的话，仍然应该使用try-catch-finally 综合使用InputStreamReader和OutputStreamWriter */ @Test public void test2() throws Exception { //1.造文件、造流 File file1 = new File(&amp;quot;dbcp.</description>
    </item>
    
    <item>
      <title>缓冲流</title>
      <link>https://Carrylu.github.io/post/buffer/</link>
      <pubDate>Sun, 14 Jul 2019 23:11:49 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/buffer/</guid>
      <description>1.缓冲流涉及到的类  BufferedInputStream BufferedOutputStream BufferedReader BufferedWriter  2.作用 作用：提供流的读取、写入的速度 提高读写速度的原因：内部提供了一个缓冲区。默认情况下是8kb
3.典型代码 3.1使用BufferedInputStream和BufferedOutputStream:处理非文本文件 //实现文件复制的方法 public void copyFileWithBuffered(String srcPath,String destPath){ BufferedInputStream bis = null; BufferedOutputStream bos = null; try { //1.造文件 File srcFile = new File(srcPath); File destFile = new File(destPath); //2.造流 //2.1 造节点流 FileInputStream fis = new FileInputStream((srcFile)); FileOutputStream fos = new FileOutputStream(destFile); //2.2 造缓冲流 bis = new BufferedInputStream(fis); bos = new BufferedOutputStream(fos); //3.复制的细节：读取、写入 byte[] buffer = new byte[1024]; int len; while((len = bis.</description>
    </item>
    
    <item>
      <title>节点流</title>
      <link>https://Carrylu.github.io/post/jiedian/</link>
      <pubDate>Fri, 12 Jul 2019 23:27:40 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/jiedian/</guid>
      <description>1.FileReader/FileWriter的使用： 1.1 FileReader的使用 /* 将day09下的hello.txt文件内容读入程序中，并输出到控制台 说明点： 1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1 2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理 3. 读入的文件一定要存在，否则就会报FileNotFoundException。 */ @Test public void testFileReader1() { FileReader fr = null; try { //1.File类的实例化 File file = new File(&amp;quot;hello.txt&amp;quot;); //2.FileReader流的实例化 fr = new FileReader(file); //3.读入的操作 //read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1 char[] cbuf = new char[5]; int len; while((len = fr.read(cbuf)) != -1){ //方式一： //错误的写法 // for(int i = 0;i &amp;lt; cbuf.length;i++){ // System.out.print(cbuf[i]); // } //正确的写法 // for(int i = 0;i &amp;lt; len;i++){ // System.</description>
    </item>
    
    <item>
      <title>Io流概述</title>
      <link>https://Carrylu.github.io/post/io/</link>
      <pubDate>Fri, 12 Jul 2019 23:17:11 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/io/</guid>
      <description> 1.流的分类  1.操作数据单位：字节流、字符流 2.数据的流向：输入流、输出流 3.流的角色：节点流、处理流  图示： 2.流的体系结构 * 说明：红框对应的是IO流中的4个抽象基类。 * 蓝框的流需要大家重点关注。
3.重点说明的几个流结构 4.输入输出标准化问题 4.1 输入过程  ① 创建File类的对象，指明读取的数据的来源。（要求此文件一定要存在） ② 创建相应的输入流，将File类的对象作为参数，传入流的构造器中 ③ 具体的读入过程： 创建相应的byte[] 或 char[]。 ④ 关闭流资源 说明：程序中出现的异常需要使用try-catch-finally处理。  4.2 输出过程  ① 创建File类的对象，指明写出的数据的位置。（不要求此文件一定要存在） ② 创建相应的输出流，将File类的对象作为参数，传入流的构造器中 ③ 具体的写出过程： write(char[]/byte[] buffer,0,len) ④ 关闭流资源 说明：程序中出现的异常需要使用try-catch-finally处理。  </description>
    </item>
    
    <item>
      <title>File类的使用</title>
      <link>https://Carrylu.github.io/post/file/</link>
      <pubDate>Mon, 08 Jul 2019 23:04:04 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/file/</guid>
      <description> 1.File类的理解  1. File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹) 2. File类声明在java.io包下 3. File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法， 并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。 4. 后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的&amp;rdquo;终点&amp;rdquo;.  2.File的实例化 2.1 常用构造器  File(String filePath) File(String parentPath,String childPath) File(File parentFile,String childPath)  2.2 路径的分类  相对路径：相较于某个路径下，指明的路径。 绝对路径：包含盘符在内的文件或文件目录的路径  说明： * IDEA中： 如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。 如果大家使用main()测试，相对路径即为当前的Project下。 * Eclipse中： 不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。
3.File的常用方法 </description>
    </item>
    
    <item>
      <title>通配符的使用</title>
      <link>https://Carrylu.github.io/post/tpf/</link>
      <pubDate>Mon, 08 Jul 2019 23:01:55 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/tpf/</guid>
      <description>通配符的使用 /* 通配符的使用 通配符：? 类A是类B的父类，G&amp;lt;A&amp;gt;和G&amp;lt;B&amp;gt;是没关系的，二者共同的父类是：G&amp;lt;?&amp;gt; */ @Test public void test3(){ List&amp;lt;Object&amp;gt; list1 = null; List&amp;lt;String&amp;gt; list2 = null; List&amp;lt;?&amp;gt; list = null; list = list1; list = list2; //编译通过 // print(list1); // print(list2); // List&amp;lt;String&amp;gt; list3 = new ArrayList&amp;lt;&amp;gt;(); list3.add(&amp;quot;AA&amp;quot;); list3.add(&amp;quot;BB&amp;quot;); list3.add(&amp;quot;CC&amp;quot;); list = list3; //添加(写入)：对于List&amp;lt;?&amp;gt;就不能向其内部添加数据。 //除了添加null之外。 // list.add(&amp;quot;DD&amp;quot;); // list.add(&#39;?&#39;); list.add(null); //获取(读取)：允许读取数据，读取的数据类型为Object。 Object o = list.get(0); System.out.println(o); } public void print(List&amp;lt;?&amp;gt; list){ Iterator&amp;lt;?&amp;gt; iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.</description>
    </item>
    
    <item>
      <title>泛型在继承方面的体现</title>
      <link>https://Carrylu.github.io/post/fxjc/</link>
      <pubDate>Mon, 08 Jul 2019 22:57:58 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/fxjc/</guid>
      <description> 泛型在继承方面的体现 /* 1. 泛型在继承方面的体现 虽然类A是类B的父类，但是G&amp;lt;A&amp;gt; 和G&amp;lt;B&amp;gt;二者不具备子父类关系，二者是并列关系。 补充：类A是类B的父类，A&amp;lt;G&amp;gt; 是 B&amp;lt;G&amp;gt; 的父类 */ @Test public void test1(){ Object obj = null; String str = null; obj = str; Object[] arr1 = null; String[] arr2 = null; arr1 = arr2; //编译不通过 // Date date = new Date(); // str = date; List&amp;lt;Object&amp;gt; list1 = null; List&amp;lt;String&amp;gt; list2 = new ArrayList&amp;lt;String&amp;gt;(); //此时的list1和list2的类型不具子父类关系 //编译不通过 // list1 = list2; /* 反证法： 假设list1 = list2; list1.add(123);导致混入非String的数据。出错。 */ show(list1); show1(list2); } public void show1(List&amp;lt;String&amp;gt; list){ } public void show(List&amp;lt;Object&amp;gt; list){ } @Test public void test2(){ AbstractList&amp;lt;String&amp;gt; list1 = null; List&amp;lt;String&amp;gt; list2 = null; ArrayList&amp;lt;String&amp;gt; list3 = null; list1 = list3; list2 = list3; List&amp;lt;String&amp;gt; list4 = new ArrayList&amp;lt;&amp;gt;(); }  </description>
    </item>
    
    <item>
      <title>自定义泛型类、泛型接口、泛型方法</title>
      <link>https://Carrylu.github.io/post/fanxing1/</link>
      <pubDate>Sat, 06 Jul 2019 22:49:11 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/fanxing1/</guid>
      <description>举例： 【Order.java】
public class Order&amp;lt;T&amp;gt; { String orderName; int orderId; //类的内部结构就可以使用类的泛型 T orderT; public Order(){ //编译不通过 // T[] arr = new T[10]; //编译通过 T[] arr = (T[]) new Object[10]; } public Order(String orderName,int orderId,T orderT){ this.orderName = orderName; this.orderId = orderId; this.orderT = orderT; } //如下的个方法都不是泛型方法 public T getOrderT(){ return orderT; } public void setOrderT(T orderT){ this.orderT = orderT; } @Override public String toString() { return &amp;quot;Order{&amp;quot; + &amp;quot;orderName=&#39;&amp;quot; + orderName + &#39;\&#39;&#39; + &amp;quot;, orderId=&amp;quot; + orderId + &amp;quot;, orderT=&amp;quot; + orderT + &#39;}&#39;; } //静态方法中不能使用类的泛型。 // public static void show(T orderT){ // System.</description>
    </item>
    
    <item>
      <title>泛型在集合中的使用</title>
      <link>https://Carrylu.github.io/post/fanxing/</link>
      <pubDate>Sat, 06 Jul 2019 22:32:47 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/fanxing/</guid>
      <description>泛型在集合中的使用 1.在集合中使用泛型之前 @Test public void test1(){ ArrayList list = new ArrayList(); //需求：存放学生的成绩 list.add(78); list.add(76); list.add(89); list.add(88); //问题一：类型不安全 // list.add(&amp;quot;Tom&amp;quot;); for(Object score : list){ //问题二：强转时，可能出现ClassCastException int stuScore = (Integer) score; System.out.println(stuScore); } }  图示：在集合中没有泛型时 2.在集合中使用泛型 @Test public void test2(){ ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;(); list.add(78); list.add(87); list.add(99); list.add(65); //编译时，就会进行类型检查，保证数据的安全 // list.add(&amp;quot;Tom&amp;quot;); //方式一： // for(Integer score : list){ // //避免了强转操作 // int stuScore = score; // // System.out.println(stuScore); // // } //方式二： Iterator&amp;lt;Integer&amp;gt; iterator = list.</description>
    </item>
    
    <item>
      <title>Collections工具类</title>
      <link>https://Carrylu.github.io/post/collections/</link>
      <pubDate>Fri, 05 Jul 2019 23:41:45 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/collections/</guid>
      <description>Collections工具类 1.作用：操作Collection的Map的工具类 2.常用方法： reverse(List)：反转 List 中元素的顺序 shuffle(List)：对 List 集合元素进行随机排序 sort(List)：根据元素的自然顺序对指定 List 集合元素升序排序 sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序 swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换 Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素 Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素 Object min(Collection) Object min(Collection，Comparator) int frequency(Collection，Object)：返回指定集合中指定元素的出现次数 void copy(List dest,List src)：将src中的内容复制到dest中 boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所旧值  说明：ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程的。 使用synchronizedList(List list） 和 synchronizedMap(Map map）
3.面试题 面试题：Collection 和 Collections的区别？ 答：collection是集合，collections是工具类。</description>
    </item>
    
    <item>
      <title>Map接口</title>
      <link>https://Carrylu.github.io/post/map/</link>
      <pubDate>Fri, 05 Jul 2019 23:23:59 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/map/</guid>
      <description>双列集合框架：map 1.常用实现类结构 |----Map:双列数据，存储key-value对的数据 ---类似于高中的函数：y = f(x) * |----HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value * |----LinkedHashMap:保证在遍历map元素时，可以照添加的顺序实现遍历。 * 原因：在原的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。 * 对于频繁的遍历操作，此类执行效率高于HashMap。 * |----TreeMap:保证照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序 * 底层使用红黑树 * |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value * |----Properties:常用来处理配置文件。key和value都是String类型 * * * HashMap的底层：数组+链表 （jdk7及之前) * 数组+链表+红黑树 （jdk 8)  2.存储结构的理解 &amp;gt;Map中的key:无序的、不可重复的，使用Set存储所的key ---&amp;gt; key所在的类要重写equals()和hashCode() （以HashMap为例) &amp;gt;Map中的value:无序的、可重复的，使用Collection存储所的value ---&amp;gt;value所在的类要重写equals() &amp;gt; 一个键值对：key-value构成了一个Entry对象。 &amp;gt;Map中的entry:无序的、不可重复的，使用Set存储所的entry  图示：
3.常用方法 * 添加：put(Object key,Object value) * 删除：remove(Object key) * 修改：put(Object key,Object value) * 查询：get(Object key) * 长度：size() * 遍历：keySet() / values() / entrySet()  4.内存结构说明（难点） 4.</description>
    </item>
    
    <item>
      <title>Set接口</title>
      <link>https://Carrylu.github.io/post/set/</link>
      <pubDate>Wed, 03 Jul 2019 23:33:04 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/set/</guid>
      <description>Collection接口子接口：Set接口 1、存储的数据特点：无序的、不可重复的元素 具体的： 以HashSet为例说明： 1. 无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。 2. 不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。
2、元素添加的过程：（以Hashset为例） 我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值， 此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断 数组此位置上是否已经元素： 如果此位置上没其他元素，则元素a添加成功。 ---&amp;gt;情况1 如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值： 如果hash值不相同，则元素a添加成功。---&amp;gt;情况2 如果hash值相同，进而需要调用元素a所在类的equals()方法： equals()返回true,元素a添加失败 equals()返回false,则元素a添加成功。---&amp;gt;情况2 对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。 jdk 7 :元素a放到数组中，指向原来的元素。 jdk 8 :原来的元素在数组中，指向元素a 总结：七上八下 HashSet底层：数组+链表的结构。（前提：jdk7)  3、常用方法 Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。  4、常用实现类 |----Collection接口：单列集合，用来存储一个一个的对象 * |----Set接口：存储无序的、不可重复的数据 --&amp;gt;高中讲的“集合” * |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值 * |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历 * 在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。 对于频繁的遍历操作，LinkedHashSet效率高于HashSet. * |----TreeSet：可以照添加对象的指定属性，进行排序。  5、存储对象所在类的要求 HashSet/LinkedHashSet: 要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals() 要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码 * 重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。 TreeSet: 1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals(). 2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().  6、Treeset的使用 6.1 使用说明 1.向TreeSet中添加的数据，要求是相同类的对象。
2.两种排序方式：自然排序（实现Comparable接口和定制排序（Comparator）。
6.2 常用的排序方式 //方式一：自然排序 @Test public void test1(){ TreeSet set = new TreeSet(); //失败：不能添加不同类的对象 // set.</description>
    </item>
    
    <item>
      <title>Github更新方法</title>
      <link>https://Carrylu.github.io/post/hehe1/</link>
      <pubDate>Tue, 02 Jul 2019 23:39:02 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/hehe1/</guid>
      <description>第0步：现在carrylublog目录下输入 hugo --theme=m10c --baseUrl=&amp;quot;https://Carrylu.github.io/&amp;quot; --buildDrafts
第一步：先cd进入public文件夹，查看当前git仓库状态 git status
第二步：更新全部 git add *
第三步：接着输入git commit -m &amp;ldquo;更新说明&amp;rdquo; git commit -m &amp;quot;更新说明&amp;quot;
第四步：push到远程master分支上 git push origin master</description>
    </item>
    
    <item>
      <title>List接口</title>
      <link>https://Carrylu.github.io/post/hehe3/</link>
      <pubDate>Tue, 02 Jul 2019 23:39:02 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/hehe3/</guid>
      <description>Collection接口子接口：List接口 1、存储的数据特点：有序的、可重复的数据 2、常用方法 增：add(); 删：remove(int index); / remove(Object obj); 改：set(int index,Object ele); //按照索引查找 查：get(int index); 插：add(int index,Object ele); 长度：size(); 遍历：① Iterator迭代器方式 ② 增强for循环 ③ 普通的循环  ① Iterator迭代器方式
Iterator iterator=list.iterator(); while(iterator.hasnext()){ System.out.println(iterator.next()); }  ② 增强for循环
for(Object obj: list){ System.out.println(obj); }  ③ 普通的循环
String[] arr=new String[]{&amp;quot;AA&amp;quot;,&amp;quot;AA&amp;quot;,&amp;quot;AA&amp;quot;}; for(int i=0;i&amp;lt;arr.length;i++){ System.out.println(arr[i]); }  3、常用实现类 |----Collection接口：单列集合，用来存储一个一个的对象 * |----List接口：存储序的、可重复的数据。 --&amp;gt;“动态”数组,替换原的数组 * |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储 * |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储 * |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储  4、源码分析 4.1 Arraylist源码分析 * 2.</description>
    </item>
    
    <item>
      <title>青岛毕业行</title>
      <link>https://Carrylu.github.io/post/blog/</link>
      <pubDate>Tue, 02 Jul 2019 23:18:53 +0800</pubDate>
      
      <guid>https://Carrylu.github.io/post/blog/</guid>
      <description> 青岛毕业行 </description>
    </item>
    
  </channel>
</rss>